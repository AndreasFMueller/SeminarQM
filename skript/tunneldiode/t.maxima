/* Definition der Matrizen */
T1: matrix([exp(%i * k * x), exp(-%i * k * x)],
	%i * k * [exp(%i * k * x), -exp(-%i * k * x)])                      $

T2: matrix([exp(kappa * x), exp(-kappa * x)],
	kappa * [exp(kappa * x), -exp(-kappa * x)])                         $

/* Substitution von -a bzw. a in der Matrix 
subst(-a, x, T2);
invert(subst(a, x, T2));
*/

/* Berechnung der mittleren Matrix, dies ist vorteilhaft, weil sich die
   Terme zu sinh und cosh vereinfachen lassen */
middle: subst(-a, x, T2) . invert(subst(a, x, T2))                          $

/* Die eingebaute Funktion demoivre funktioniert nur fuer komplexe
   exponentialfunktionen, die folgende Version 
   (https://www.ma.utexas.edu/pipermail/maxima/2010/021070.html)
   tut dasselbe fuer gew√∂hnliche Exponentialfunktionen und hyperbolische
   Funktionen */
hypdemoivre(e) :=
subst("^" = lambda([a,b], if a = %e then cosh(b) + sinh(b) else a^b), e)    $

middle2: expand(hypdemoivre(middle));

/* Damit kann jetzt das vollstaendige Matrizenprodukt ausgerechnet werden: */
demoivre: false;
c: invert(subst(-a, x, T1)) . middle2 . subst(a, x, T1);
expand(c);

/* wir moechten den sinh-Faktor ausklammern */
result: facsum(expand(c), sinh(2 * a * kappa), cosh(2 * a * kappa));

/* Darstellung im TeX-Format */
tex(result);

/* Amplitude der einfallenden Welle */
tex(result[1,1]);
tex(result[2,1]);

/* Berechnung der Wellenfunktion in der Barriere */
b: invert(subst(a, x, T2)) . subst(a, x, T1)$
psibarrier: expand(b[1,1] * exp(kappa * x) + b[2,1] * exp(-kappa * x))      $
psiprob: facsum(hypdemoivre(expand(psibarrier * conjugate(psibarrier))),
	sinh(2 * kappa * x - 2 * a * kappa),
	cosh(2 * kappa * x - 2 * a * kappa));
tex(psiprob);

/* Verhaeltnis zwischen einfallender und abgehender Welle */
/*
amplitudes: facsum(expand(conjugate(c) * c), sinh(2 * a * kappa));
amplitudes[1,1];
*/

/* Berechnung der Wahrscheinlichkeit im Bereich links von der Barriere */
psi: result[1,1] * exp(%i * k * x) + result[2,1] * exp(-%i * k * x);
psi: ratexpand(psi * exp(-%i * k * a));
psi: subst(%i * delta, %i * k * x + %i * k * a, psi);
psi: subst(-%i * delta, -%i * k * x - %i * k * a, psi);
psi: expand(psi * conjugate(psi));
psi: demoivre(psi);
psi: expand(psi);
psi: facsum(psi,
	sinh(2 * a * kappa),
	cosh(2 * a * kappa),
	sin(2 * delta),
	cos(2 * delta)
);
psi: subst(1/2 * cosh(4 * a * kappa) - 1/2, sinh(2 * a * kappa)^2, psi);
psi: subst(1/2 * cosh(4 * a * kappa) + 1/2, cosh(2 * a * kappa)^2, psi);
psi: subst(1/2 * sinh(4 * a * kappa) / sinh(2 * a * kappa),
	cosh(2 * a * kappa), psi);
psi: expand(psi);
psi: facsum(psi,
	cos(2 * delta),
	sin(2 * delta),
	sinh(4 * a * kappa),
	cosh(4 * a * kappa)
);
tex(psi);


